{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","newObject","post","id","put","Notification","message","className","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","console","log","length","notesToShow","filter","map","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sMAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,+BACKH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCP1CI,EAAU,aAcD,EAZA,WACX,OAAOC,IAAMC,IAAIF,IAWN,EARA,SAAAG,GACX,OAAOF,IAAMG,KAAKJ,EAASG,IAOhB,EAJA,SAACE,EAAIF,GAChB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IC6EnCI,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKC,UAAU,QAAf,SACKD,KAKEE,EAjGH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,0BAJnC,mBAIPO,EAJO,KAIOC,EAJP,KA0BdC,qBAAU,WACNC,IAEKC,MAAK,SAAAC,GACFV,EAASU,EAASC,WAE3B,IACHC,QAAQC,IAAI,SAAUd,EAAMe,OAAQ,SAEpC,IAqBMC,EAAcZ,EACdJ,EACAA,EAAMiB,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAEhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcW,QAASU,IACvB,8BACI,yBAAQnB,QAAS,kBAAMkB,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKY,EAAYE,KAAI,SAAApC,GAAI,OACjB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAjEvC,SAAAU,GAEvB,IAAMX,EAAOkB,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAOvC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CwB,EACYhB,EAAI4B,GACXX,MAAK,SAAAC,GACFV,EAASD,EAAMkB,KAAI,SAAApC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAO6B,EAASC,YAC7DU,OAAM,SAAAC,GACThB,EAAgB,SAAD,OACFzB,EAAKI,QADH,sCAGfsC,YAAW,WACPjB,EAAgB,QACjB,KACHN,EAASD,EAAMiB,QAAO,SAAAG,GAAC,OAAIA,EAAE3B,KAAOA,SAiD4BgC,CAAmB3C,EAAKW,MAArEX,EAAKW,SAGxB,uBAAMiC,SAvCE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf3C,QAASgB,EACT4B,MAAM,IAAIC,MAAOC,cACjB/C,UAAWgD,KAAKC,SAAW,IAG/BzB,EACYoB,GACPnB,MAAK,SAAAC,GACFV,EAASD,EAAMmC,OAAOxB,EAASC,OAC/BT,EAAW,QA2Bf,UACI,uBACIiC,MAAOlC,EACPmC,SA1BS,SAACV,GACtBd,QAAQC,IAAIa,EAAMW,OAAOF,OACzBjC,EAAWwB,EAAMW,OAAOF,UA0BhB,wBAAQG,KAAK,SAAb,yBChFhBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d4d2924c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update\r\n}","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n    const toggleImportanceOf = id => {\n        // const url = `http://localhost:3001/api/notes/${id}`\n        const note = notes.find(n => n.id === id)\n        const changedNote = {...note, important: !note.important}\n\n        noteService\n            .update(id, changedNote)\n            .then(response => {\n                setNotes(notes.map(note => note.id !== id ? note : response.data))\n            }).catch(error => {\n            setErrorMessage(\n                `Note '${note.content}' was already removed from server`\n            )\n            setTimeout(() => {\n                setErrorMessage(null)\n            }, 5000)\n            setNotes(notes.filter(n => n.id !== id))\n        })\n    }\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(response => {\n                setNotes(response.data)\n            })\n    }, [])\n    console.log('render', notes.length, 'notes')\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(response => {\n                setNotes(notes.concat(response.data))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    )\n}\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='error'>\n            {message}\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}